name: Reusable CD Workflow

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      container-name:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_SSH_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USERNAME:
        required: true

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: public.ecr.aws/e7w4k6e4

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/reinput-key.pem
          chmod 600 ~/.ssh/reinput-key.pem
          cat >>~/.ssh/config <<END
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/reinput-key.pem
            StrictHostKeyChecking no
          END

      - name: Deploy to EC2
        run: |
          ssh ec2 '
            aws ecr-public get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            if docker ps -a | grep -q ${{ inputs.container-name }}; then
              docker stop ${{ inputs.container-name }}
              docker rm ${{ inputs.container-name }}
              docker rmi ${{ env.ECR_REGISTRY }}/${{ inputs.image-name }}:latest || true
            fi

            docker pull ${{ env.ECR_REGISTRY }}/${{ inputs.image-name }}:latest
            docker run -d \
              --name ${{ inputs.container-name }} \
              --network host \
              ${{ env.ECR_REGISTRY }}/${{ inputs.image-name }}:latest
            
            docker ps | grep ${{ inputs.container-name }}
          '